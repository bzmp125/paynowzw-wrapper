<?php

class Pay extends main{
    var $_params;
    private $paynow_integration_key = "paynow_integration_key_here";
    private $paynow_integration_id = "paynow_integration_id_here";

    function Pay($_params){
        parent::__construct();
        $this->_params = $_params;
    }

    private function get_paynow_integration_key(){
        return $this->paynow_integration_key;
    }

    private function get_paynow_integration_id(){
        return $this->paynow_integration_id;
    }

    function processRequest(){
        /*
         * If you are not using a routing framework like me, this is where you'd want to do the routing dependant on the HTTP Request Method
         * found in $this->request_method
         *
         *
         * eg GET  /topup/transasction_id could be finding the status of the transation
         *    POST /topup could initialise a transaction
         *    DELETE /topup could cancel a transaction
         *
         * This is totally up to you and not tied to paynow
         */

        //for now I'll simply return the initialise_transaction() method
        return $this->initialise_transaction();
    }

    function generate_reference(){
        return "INV".rand(999,999999);
    }

    function initialise_transaction(){
        /*
         * This is where you might want to do anything user specific things like grabbing the username or id or whatever
         * and also validating whether the passed username is legit. This part is specific to your system and has got nothing to do with Paynow,
         */

        $paynow_data['reference'] = $this->generate_reference(); //this is optional and generated by you
        $paynow_data['amount'] = $_REQUEST['amount'];
        $paynow_data['ID'] = $this->get_paynow_integration_id();
        $paynow_data['returnurl'] = "http://myawesomeapp.com/payment/987282/thankyou"; //this is where the user will be redirected to once payment has been completed
        $paynow_data['resulturl'] = "http://myawesomeapp.com/api/payments/987282"; //this is the url Paynow will be 'POSTing' updates to. you should structure it
                                                    //such that your system should know what to do with the parameters passed. Check for the parameters on the actual documentation.

        $paynow_data['status'] = "Message";

        $paynow_data['hash'] = $this->createHash($paynow_data, $this->get_paynow_integration_key());

        //you might want to save your invoice data here before sending. The choice is completely up to you.

        //paynow initiatetransaction url
        $url = "https://www.paynow.co.zw/interface/initiatetransaction";

        //POSTing $paynow_data to PayNow, and storing the returned data from PayNow in $paynow_return
        //the empty array is for headers, you can change the send_curl function in includes/functions.php

        parse_str(send_curl($url,"POST", array(),$paynow_data), $paynow_return);

        //saving the returned hash before checking
        $hash_to_check = $this->createHash($paynow_return, $this->get_paynow_integration_key());
        //if PayNow has initiated the transaction and the hash that we passed is the same as the hash that is returned, therefore its safe to continue

        if($paynow_return['status']=="Ok" && $hash_to_check==$paynow_return['hash']){
            //here you might want to update the invoice maybe in your database and show that the transaction has been initiated

            $return['success'] = true;
            $return['message'] = "TRANSACTION INITIATED.";
            $return['data']= ["browserurl"=>$paynow_return['browserurl']]; //this is the url you should now redirect your user to, provided by Paynow
        }else{
            $return['success'] = false;
            $return['message'] = "TRANSACTION INITIATION FAILED.";
        }
        return $return;
    }

    private function createHash($values, $IntegrationKey){
        $string = "";
        foreach($values as $key=>$value) {
            if( strtoupper($key) != "HASH" ){
                $string .= $value;
            }
        }
        $string .= $IntegrationKey;
        $hash = hash("sha512", $string);
        return strtoupper($hash);
    }

}
